from flask import Flask, render_template, json, request,redirect,session,jsonify,current_app
from flask.ext.mysql import MySQL
from werkzeug import generate_password_hash, check_password_hash
import os
import sys
from flask import request
import MySQLdb as mdb
import csv
from flask.ext.paginate import Pagination
import time

mysql = MySQL()
app = Flask(__name__)

con = mdb.connect('localhost', 'root', 'admin123', 'twitter')

@app.route('/')
def main():
    return render_template('home1.html')

@app.route('/home2', methods=['POST','GET'])
def home2():
    return render_template('home1.html')

@app.route('/signUp1', methods=['POST','GET'])
def signUp1():
    return render_template('signup_new.html')

@app.route('/Login1' , methods=['POST','GET'])
def Login1():
    return render_template('login.html')

@app.route('/Login' , methods=['POST','GET'])
def Login():
  
    email=request.form['username']
    passwd=request.form['pwd1']
    with con:
        cur = con.cursor()
        cur.execute("SELECT * from signupnew1")
	num=int(cur.rowcount)
        print num
	for i in range (num):
            row = cur.fetchone()
            print row
            if (row):
                if(email==row[0] and passwd==row[1]):
		    flag=1
                                       
        if(flag==1):
            return render_template('social.html')
                   
                    
        else:
	    return render_template('index.html')
                    
        

@app.route('/showSignUp' , methods=['POST'])
def showSignUp():
    n=request.form['radiog_lite']
   
    if(n=="0"):
        return render_template('sdbs_twitter.html')
        
    elif(n=="1"):
        return render_template('sdbs_fb.html')    
    else:
        return render_template('social.html')    


@app.route('/twit' , methods=['POST','GET'])
def twit():
    
    keyword = request.form['keyword2']
    linkid=request.form['rcheck']
    twitid=request.form['twitterid']
    maxcnt=int(request.form['maxcount'])
    button=request.form['btn']
    counts = []
    with con:
        cur = con.cursor()
        cur.execute("delete from tweet31")
        cur.execute("delete from tweets29")
   
    if (linkid=="0" and button=="BehavioralSearch"):
        for d in csv.DictReader(open(keyword+'.csv'), delimiter='\t'):
            counts.append((d[keyword])) 
    
        os.system(("python linking_through_twitid.py") )
	for i in range(0,len(counts)):
            os.system(("python globalsearch.py {} {}".format(counts[i],maxcnt)) ) 
	    os.system(("python store_globaldata_to_sql.py {}".format(counts[i])) )
        #os.system("python pipe2.py")
        page, per_page, offset = get_page_items()
        with con:
            cur = con.cursor()	
            cnt=cur.execute("SELECT * from tweet31")
            cur.execute("SELECT * from tweet31 limit {},{}".format(offset,per_page))
            user = cur.fetchall()
            total=cur.fetchone()
            pagination = get_pagination(page=page,
                                per_page=per_page,
                                total=cnt,
                                record_name='user',
                                format_total=True,
                                format_number=True,
                                )
        return render_template('pagi1.html', user=user,
                           page=page,
                           per_page=per_page,
                           pagination=pagination,
                           )
        
    
    if (linkid=="1" and button=="BehavioralSearch"):
        for d in csv.DictReader(open(keyword+'.csv'), delimiter='\t'):
            counts.append((d[keyword])) 
    
        os.system(("python linking_through_twitid.py {}".format(twitid)) )
	for i in range(0,len(counts)):
            os.system(("python globalsearch.py {} {}".format(counts[i],maxcnt)) ) 
	    os.system(("python store_globaldata_to_sql.py {}".format(counts[i])) )
        #os.system("python pipe2.py")
        page, per_page, offset = get_page_items()
        with con:
            cur = con.cursor()	
            cnt=cur.execute("SELECT * from tweet31")
            cur.execute("SELECT * from tweet31 limit {},{}".format(offset,per_page))
            user = cur.fetchall()
            total=cur.fetchone()
            pagination = get_pagination(page=page,
                                per_page=per_page,
                                total=cnt,
                                record_name='user',
                                format_total=True,
                                format_number=True,
                                )
        return render_template('pagi1.html', user=user,
                           page=page,
                           per_page=per_page,
                           pagination=pagination,
                           ) 
    if (linkid=="2" and button=="BehavioralSearch"): 
        for d in csv.DictReader(open(keyword+'.csv'), delimiter='\t'):
            counts.append((d[keyword])) 
    	
	for i in range(0,len(counts)):
            print counts[i]
            os.system(("python globalsearch.py {} {}".format(counts[i],maxcnt)) ) 
	    os.system(("python store_globaldata_to_sql.py {}".format(counts[i])) )
	#os.system("python pipe2.py")
        page, per_page, offset = get_page_items()
        with con:
            cur = con.cursor()	
            cnt=cur.execute("SELECT * from tweet31")
            cur.execute("SELECT * from tweet31 limit {},{}".format(offset,per_page))
            user = cur.fetchall()
            total=cur.fetchone()
            pagination = get_pagination(page=page,
                                per_page=per_page,
                                total=cnt,
                                record_name='user',
                                format_total=True,
                                format_number=True,
                                )
        return render_template('pagi1.html', user=user,
                           page=page,
                           per_page=per_page,
                           pagination=pagination,
                           ) 
    if (linkid=="0" and button=="DirectSearch"):
        
        os.system(("python linking_through_twitid.py") )
	print keyword
        print maxcnt
        os.system(("python globalsearch.py {} {}".format(keyword,maxcnt)) ) 
	os.system(("python store_globaldata_to_sql.py {}".format(keyword)) )
        #os.system("python pipe2.py")
        page, per_page, offset = get_page_items()
        with con:
            cur = con.cursor()	
            cnt=cur.execute("SELECT * from tweet31")
            cur.execute("SELECT * from tweet31 limit {},{}".format(offset,per_page))
            user = cur.fetchall()
            total=cur.fetchone()
            pagination = get_pagination(page=page,
                                per_page=per_page,
                                total=cnt,
                                record_name='user',
                                format_total=True,
                                format_number=True,
                                )
        return render_template('pagi1.html', user=user,
                           page=page,
                           per_page=per_page,
                           pagination=pagination,
                           )
        
    if (linkid=="1" and button=="DirectSearch"):
       
        os.system(("python linking_through_twitid.py {}".format(twitid)) )
	os.system(("python globalsearch.py {} {}".format(keyword,maxcnt)) ) 
	os.system(("python store_globaldata_to_sql.py {}".format(keyword)) )
        #os.system("python pipe2.py")
        page, per_page, offset = get_page_items()
        with con:
            cur = con.cursor()	
            cnt=cur.execute("SELECT * from tweet31")
            cur.execute("SELECT * from tweet31 limit {},{}".format(offset,per_page))
            user = cur.fetchall()
            total=cur.fetchone()
            pagination = get_pagination(page=page,
                                per_page=per_page,
                                total=cnt,
                                record_name='user',
                                format_total=True,
                                format_number=True,
                                )
        return render_template('pagi1.html', user=user,
                           page=page,
                           per_page=per_page,
                           pagination=pagination,
                           ) 

    if (linkid=="2" and button=="DirectSearch"): 
    	
        os.system(("python globalsearch.py {} {}".format(keyword,maxcnt)) ) 
	os.system(("python store_globaldata_to_sql.py {}".format(keyword)) )
	#os.system("python pipe2.py")
        page, per_page, offset = get_page_items()
        with con:
            cur = con.cursor()	
            cnt=cur.execute("SELECT * from tweet31")
            cur.execute("SELECT * from tweet31 limit {},{}".format(offset,per_page))
            user = cur.fetchall()
            total=cur.fetchone()
            pagination = get_pagination(page=page,
                                per_page=per_page,
                                total=cnt,
                                record_name='user',
                                format_total=True,
                                format_number=True,
                                )
        return render_template('pagi1.html', user=user,
                           page=page,
                           per_page=per_page,
                           pagination=pagination,
                           ) 
    #return render_template('social.html')  


             
@app.route('/get_page_items' , methods=['POST','GET'])
def get_page_items():

    page = int(request.args.get('page', 1))
    per_page = request.args.get('per_page')
    if not per_page:		
        per_page = current_app.config.get('PER_PAGE', 10)
    else:
        per_page = int(per_page)
    offset = (page - 1) * per_page
    return page, per_page, offset
                   
     
@app.route('/get_css_framework' , methods=['POST','GET'])
def get_css_framework():
    return current_app.config.get('CSS_FRAMEWORK', 'bootstrap3')

@app.route('/get_link_size' , methods=['POST','GET'])
def get_link_size():
    return current_app.config.get('LINK_SIZE', 'sm')

@app.route('/show_single_page_or_not' , methods=['POST','GET'])
def show_single_page_or_not():
    return current_app.config.get('SHOW_SINGLE_PAGE', False)

@app.route('/get_pagination' , methods=['POST','GET'])
def get_pagination(**kwargs):
    kwargs.setdefault('record_name', 'records')
    return Pagination(css_framework=get_css_framework(),
		              link_size=get_link_size(),
		              show_single_page=show_single_page_or_not(),
		              **kwargs
		              )


@app.route('/signUp' , methods=['POST','GET'])

def signUp():
    email=request.form['username']
    ans1=request.form['ans']
    passwd=request.form['pwd1']
    question=request.form['role']
    timeat1=time.ctime()
    print timeat1,question
    if (question=="1"):
	print "with"
        with con:
	    ques="What is your birth place"
            cur = con.cursor()
            cur.execute("INSERT INTO signupnew1(email,pass,timeat,question1,ans) VALUES(%s,%s,%s,%s,%s)",((email),(passwd),(timeat1),(ques),(ans1)))
  
    if (question=='2'):
        with con:
	    ques="What is your nick name"
            cur = con.cursor()
            cur.execute("INSERT INTO signupnew1(email,pass,timeat,question1,ans) VALUES(%s,%s,%s,%s,%s)",((email),(passwd),(timeat1),(ques),(ans1)))
    if (question=='3'):
        with con:
	    ques="What was name of your first pet"
            cur = con.cursor()
            cur.execute("INSERT INTO signupnew1(email,pass,timeat,question1,ans) VALUES(%s,%s,%s,%s,%s)",((email),(passwd),(timeat1),(ques),(ans1)))
  

    return render_template('login.html')

@app.route('/forgetr' , methods=['POST','GET'])
def forgetr():
    return render_template('forget.html')	   

@app.route('/forget' , methods=['POST','GET'])
def forget():
    user=request.form['username']
    ans1=request.form['ans']
    question=request.form['role']
    flag=0
    if (question=="1"):
	ques="What is your birth place"
        with con:
            cur = con.cursor()
            
            cur.execute("SELECT * from signupnew1")
            num=int(cur.rowcount)
            print num
	    for i in range (num):
                row = cur.fetchone()
                print row
                if (row):
                    if(user==row[0] and ques==row[3] and ans1==row[4]):
		        flag=1
                                       
            if(flag==1):
                return render_template('reset.html')
                   
                    
            else:
	        return render_template('forget.html')
                    
       
            
    if (question=='2'):
        ques="What is your nick name"
        with con:
            cur = con.cursor()
            
            cur.execute("SELECT * from signupnew1")
            num=int(cur.rowcount)
            print num
	    for i in range (num):
                row = cur.fetchone()
                print row
                if (row):
                    if(user==row[0] and ques==row[3] and ans1==row[4]):
		        flag=1
                                       
            if(flag==1):
                return render_template('reset.html')
                   
                    
            else:
	        return render_template('forget.html')
                    
        
    if (question=='3'):
        ques="What was your first pet name"
        with con:
            cur = con.cursor()
            
            cur.execute("SELECT * from signupnew1")
            num=int(cur.rowcount)
            print num
	    for i in range (num):
                row = cur.fetchone()
                print row
                if (row):
                    if(user==row[0] and ques==row[3] and ans1==row[4]):
		        flag=1
                                       
            if(flag==1):
                return render_template('reset.html')
                   
                    
            else:
	        return render_template('forget.html')
                    
        
@app.route('/reset' , methods=['POST','GET'])
def reset():
    user=request.form['username']
    pass1=request.form['pwd1']
    timeat1=time.ctime()
    print timeat1
    with con:
        cur = con.cursor()	
     
        cur.execute("update signupnew1 set pass=%s,timeat=%s where email=%s ",((pass1),(timeat1),(user)))
        print user,pass1
    return render_template('login.html') 

@app.route('/fb' , methods=['POST','GET'])
def fb():
    keyword = request.form['fbkeyword']
    maxcnt=int(request.form['fbmaxcnt'])
    button=request.form['btn']
    if(button=="DirectSearch"):
        os.system(("python italynew1.py {} {} {} {}".format(0,0,(keyword),(maxcnt))) )         
        page, per_page, offset = get_page_items()
        with con:
            cur = con.cursor()	
            cnt=cur.execute("SELECT * from fb1")
            cur.execute("SELECT * from fb1 limit {},{}".format(offset,per_page))
            user = cur.fetchall()
            total=cur.fetchone()
            pagination = get_pagination(page=page,
                                per_page=per_page,
                                total=cnt,
                                record_name='user',
                                format_total=True,
                                format_number=True,
                                )
        return render_template('pagi2.html', user=user,
                           page=page,
                           per_page=per_page,
                           pagination=pagination,
                           )
    if(button=="BehaviorSearch"):
        for d in csv.DictReader(open(keyword+'.csv'), delimiter='\t'):
            counts.append((d[keyword])) 
    	
	for i in range(0,len(counts)):
            os.system(("python italynew1.py {} {} {} {}".format(0,0,(counts[i]),(maxcnt))) ) 

	with con:
            cur = con.cursor()	
            cnt=cur.execute("SELECT * from fb1")
            cur.execute("SELECT * from fb1 limit {},{}".format(offset,per_page))
            user = cur.fetchall()
            total=cur.fetchone()
            pagination = get_pagination(page=page,
                                per_page=per_page,
                                total=cnt,
                                record_name='user',
                                format_total=True,
                                format_number=True,
                                )
        return render_template('pagi2.html', user=user,
                           page=page,
                           per_page=per_page,
                           pagination=pagination,
                           )

            
    return render_template('social.html') 
  
if __name__ == "__main__":
    app.run(port=5034)

